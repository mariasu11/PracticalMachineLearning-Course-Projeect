pnorm(93, mean=100, sd = 10, lower.tail = TRUE)
qnorm(.95, mean=100, sd=10, lower.tail=TRUE)
qnorm(.95, mean=100, sd = 10/sqrt(50))
choose(6,5)*.5^6 + choose(6,6)*.5^6
punif(.51,mean=.5 ,sd=1/sqrt(1200), lower.tail=FALSE)
1/sqrt(1200)
pnorm(.51,mean=.5 ,sd=1/sqrt(1200), lower.tail=FALSE)
ppois(20, lambda = 16.5*2)
1100 + c(-1,1) * qnorm(.975) * 30/sqrt(9)
6/qt(.975,8)
(.6+.68)/2
sqrt(.64)
3-5 + c(-1,1) * qt(.975,18) *.8 *(1/10 + 1/10)^.5
6-4 + c(-1,1) * qnorm(.975) * (.5^2/100 + 4/100)^.5
1.5+1.8
3.3/2
-3-1 + c(-1,1) * qt(.95,16) * 1.65 * (1/9 + 1/9)^.5
1100 + c(-1,1) * qt(.975,8)* 30/3
data(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
?ToothGrowth
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
?ToothGrowth
data
library(ggplot2)
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose))
ToothGrowth$dose
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose))
ggplot(aes(x=supp, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=supp))
g <- ggplot(ToothGrowth, aes(x = dose, y = len))
g <- g + geom_point(size =3, pch = 21, fill = "salmon", alpha = .5) + facet_grid(. ~ supp)
g
g <- ggplot(ToothGrowth, aes(x = dose, y = len))
g <- g + geom_boxplot(size =3, pch = 21, fill = "salmon", alpha = .5) + facet_grid(. ~ supp)
g
ggplot(aes(x=as.factor(dose), y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) +
labs (list(title = "ToothGrowth by Dose", x = "Dose", y = "Length"))
ggplot(aes(x=as.factor(dose), y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose))
smmary(TooothGrowth)
summary(TothGrowth)
summary(ToothGrowth)
t.test(ToothGrowth$len[ToothGrowth$supp == "OJ"],
ToothGrowth$len[ToothGrowth$supp == "VC"],
paired = FALSE)
t.test(ToothGrowth$len,
ToothGrowth$dose,
paired = TRUE)
t.test(ToothGrowth$len,
ToothGrowth$supp,
paired = TRUE)
t.test(ToothGrowth$len,
ToothGrowth$supp
)
t.test(len~supp,data=tg)$coef
t.test(len~supp,data=ToothGrowth)$coef
t.test(len~supp,data=ToothGrowth)
t.test(len~dose,data=ToothGrowth, paired = TRUE)
t.test(len~dose,data=ToothGrowth)
dose.5<-subset(ToothGrowth,ToothGrowth["dose"]==0.5)$len
t.test(len~dose.5,data=ToothGrowth)
t.test(len~dose,data=dose.5)
dose1<-subset(ToothGrowth,ToothGrowth["dose"]==0.5)
t.test(len~dose,data=dose1)
dose1
t.test(len~supp,data=ToothGrowth)
t.test(len,supp,data=ToothGrowth)
t.test(len~supp,data=ToothGrowth)
t.test(ToothGrowth$len, ToothGrowth$supp, data=ToothGrowth)
t.test(ToothGrowth$len, ToothGrowth$supp, paired=FALSE)
dose.5 <- ToothGrowth[ToothGrowth$dose==0.5,]
t.test(dose.5$len ~ dose.5$supp, data=ToothGrowth)
dose1 <- ToothGrowth[ToothGrowth$dose==1,]
t.test(dose1$len ~ dose1$supp, data=ToothGrowth)
dose2 <- ToothGrowth[ToothGrowth$dose==2,]
t.test(dose2$len ~ dose2$supp, data=ToothGrowth)
t.test(dose2$dose ~ dose2$supp, data=ToothGrowth)
t.test(len ~ dose, data = ToothGrowth,
)
len1<- Toothgrowth[Toothgrowth$dose == .5 & 1]
t.test(len1$len ~ len1$dose, data = ToothGrowth)
len1<- ToothGrowth[ToothGrowth$dose == .5 & 1]
t.test(len1$len ~ len1$dose, data = ToothGrowth)
len1<- ToothGrowth[ToothGrowth$dose == c(.5,1)]
t.test(len1$len ~ len1$dose, data = ToothGrowth)
head(ToothGrowth)
len1<- ToothGrowth[dose==0.5 | dose == 1]
len1<- ToothGrowth[ToothGrowth$dose==0.5 | ToothGrowth$dose == 1]
len1<- subset(ToothGrowth, dose==0.5 | dose == 1 )
t.test(len1$len ~ len1$dose, data = ToothGrowth)
len2<- subset(ToothGrowth, dose==0.5 | dose == 2 )
t.test(len2$len ~ len2$dose, data = ToothGrowth)
len3<- subset(ToothGrowth, dose==1 | dose == 2 )
t.test(len3$len ~ len3$dose, data = ToothGrowth)
t.test(dose.5$len ~ dose.5$supp, data=ToothGrowth, font.size=6)
data(mtcars)
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
summary(fit)
fit <- lm(mpg ~ as.factor(cyl), data=mtcars)
summary(fit)
fit3 <- lm(mpg ~ as.factor(cyl)*wt, data=mtcars)
summary(fit3)
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
result <- anova(fit, fit3, test="Chi")
result
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data=mtcars)
summary(fit4)
?mtcars
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y ~ x)
hatvalues(fit5)
dfbetas(fit5)
summary(mtcars)
head(mtcars)
str(mtcars)
boxplot(mpg ~ am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission"
)
boxplot(mpg ~ am, data= mtcars, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
boxplot(mpg ~ am, data= mtcars, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG", main="MPG vs. Transmission")
pairs(mtcars, panel=panel.smooth, main="mtcars pairs plot")
pairs(mtcars, main="mtcars pairs plot")
pairs(mtcars, panel=panel.smooth, main="mtcars pairs plot")
?mtcars
t.test(mpg ~ am)
t.test(mpg ~ am, data=mtcars)
fit1<-lm(mpg ~ am, data=mtcars)
summary(fit1)
fitall<- lm(mpg ~ ., data=mtcars)
summary(fitall)
fitfivevars<-lm(mpg ~ cyl + disp + hp + qsec + wt, data=mtcars)
summary(fitfivevars)
fitsixvars<-lm(mpg ~ am + cyl + disp + hp + qsec + wt, data=mtcars)
summary(fitsixvars)
fitsixvars
fitfin<-lm(mpg ~ am + wt + am*wt, data=mtcars)
summary(fitfin)
fitfin<-lm(mpg ~ am + wt + hp+ am*wt, data=mtcars)
fitfin1<-lm(mpg ~ am + wt + hp+ am*wt, data=mtcars)
summary(fitfin1)
fitfin1<-lm(mpg ~ am + wt + hp+ cuyl+am*wt, data=mtcars)
fitfin1<-lm(mpg ~ am + wt + hp+ cyl+am*wt, data=mtcars)
summary(fitfin1)
fitfin1<-lm(mpg ~ am + wt + hp+ qsec +am*wt, data=mtcars)
summary(fitfin1)
fitfin1<-lm(mpg ~ am + wt + disp+ qsec +am*wt, data=mtcars)
summary(fitfin1)
fitfin1<-lm(mpg ~ am + wt + hp+ qsec +am*wt, data=mtcars)
summary(fitfin1)
fitfin1<-lm(mpg ~ am + wt + qsec +am*wt, data=mtcars)
summary(fitfin1)
summary(fitsixvars)
fitfin<-lm(mpg ~ am + wt + qsec + am*wt, data=mtcars)
summary(fitfin)
anova(fitfin, fitsixvars, fitall, fit1)
par(mfrow = c(2, 2))
plot(fitfin)
confint(fitfin)
?dfbeta
dfbetas(fitfin)
summary(dfbetas(fitfin))
hatvalues(fitfin)
round(hatvalues(fitfin), 3)
leverage <- round(hatvalues(fitfin), 3)
leverage[which(leverage > 0.5)]
2/sqrt(32)
inf <- defbetas(fitfin)
inf <- dfbetas(fitfin)
inf[which(abs(in) > .35)]
inf[which(abs(inf) > .35)]
inf
summary(inf)
round(dfbetas(fitfin)[1 : 10, 2], 3)
inf[which(inf > 1)]
confint(fitfin)
summary(fitfin)
summary(fit1)
t.test(mpg ~ am, data=mtcars)
?mtcars
head(mtcars)
anova(fit1, fitall, fitsixvars, fitfin)
library(caret)
install.packages("caret")
lbrary(caret)
library(caret)
install.packages("caret")
library(caret)
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(training)
data(concrete)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(concrete)
library(Hmisc)
cutCompressiveStrength <- cut2(training$CompressiveStrength, g=4)
install.packages("acepack")
library(Hmisc)
cutCompressiveStrength <- cut2(training$CompressiveStrength, g=4)
index <- seq_along(1:nrow(training))
ggplot(data=training, aes(y=index, x=cutCompressiveStrength)) +
geom_boxplot() + geom_jitter(col="blue") + theme_bw()
ggplot(data=training, aes(y=index, x=cutCompressiveStrength)) +
geom_boxplot()
qplot(Superplasticizer, data=training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc
preProc <- preProcess(ss, method='pca', thresh=0.8,
outcome=training$diagnosis)
preProc
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
training <- data[inTrain, ]
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
head(training)
modFit <- train(Class ~ ., data = training, method = "rpart")
modFit$finalModel
plot(modFit$finalModel, uniform=T)
text(modFit$finalModel, cex=0.8)
plot(modFit$finalModel, uniform=T)
text(modFit$finalModel, cex=0.5)
plot(modFit$finalModel, uniform=T)
text(modFit$finalModel, cex=0.8)
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
treeModel <- train(Area ~ ., data=olive, method="rpart2")
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata = newdata)
predict(treeModel, newdata = newdata)
head(olive)
str(olive$Area)
summary(olive$Area)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
fit<- train(chd ~ age + alcohol + obesity + tobacco +
typea + ldl, data=trainSA, method="glm",
family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predictTrain <- predict(fit, trainSA)
predictTest <- predict(fit, testSA)
missClass(trainSA$chd, predictTrain)
missClass(testSA$chd, predictTest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vtrainf <- as.factor(vowel.train$y)
vtestf <- as.factor(vowel.test$y)
set.seed(33833)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
install.packages("randomForest")
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
library(randomForest)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(modelRF)
b <- varImp(modelRf)
order(varImp(modelRf), decreasing=T)
order(varImp(modelRf), decreasing=T)
modelRF
modelRf
install.packages("rpart")
install.packages("evaluate")
install.packages("formatR")
install.packages('formatR', type = 'source')
install.packages("formatR", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
setwd("C:/Users/Asfa/Desktop/Coursera/Practical Machine Learning")
install.packages("nloptr")
